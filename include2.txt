#include <iostream>
#include <fstream>
#include <map>
#include <set>
#include <vector>
#include <sstream>
#include <algorithm>

// Function to remove punctuation from a word
std::string removePunctuation(const std::string& word) {
    std::string result = word;
    result.erase(std::remove_if(result.begin(), result.end(), ::ispunct), result.end());
    return result;
}

// Function to convert a word to lowercase
std::string toLowerCase(const std::string& word) {
    std::string result = word;
    std::transform(result.begin(), result.end(), result.begin(), ::tolower);
    return result;
}

int main() {
    std::ifstream inputFile("input.txt");
    if (!inputFile) {
        std::cerr << "Error opening input file." << std::endl;
        return 1;
    }

    std::map<std::string, std::vector<int>> wordOccurrences;
    std::set<std::string> excludedWords = {"there", "is", "are", "were", "was", "i", "we", "of", "in"};

    std::string line;
    int lineNumber = 0;

    while (std::getline(inputFile, line)) {
        lineNumber++;

        std::istringstream iss(line);
        std::string word;

        while (iss >> word) {
            word = removePunctuation(word);
            std::string lowercaseWord = toLowerCase(word);

            if (excludedWords.find(lowercaseWord) == excludedWords.end()) {
                wordOccurrences[lowercaseWord].push_back(lineNumber);
            }
        }
    }

    // Sorting the words based on their occurrence count in descending order
    std::vector<std::pair<std::string, std::vector<int>>> sortedWords;
    for (const auto& entry : wordOccurrences) {
        sortedWords.emplace_back(entry.first, entry.second);
    }
    std::sort(sortedWords.begin(), sortedWords.end(),
              [](const auto& a, const auto& b) { return a.second.size() > b.second.size(); });

    // Printing the results
    for (const auto& entry : sortedWords) {
        std::cout << entry.first << " occurred " << entry.second.size() << " times: ";

        // Remove duplicates in the line numbers vector
        std::vector<int> uniqueLineNumbers = entry.second;
        std::sort(uniqueLineNumbers.begin(), uniqueLineNumbers.end());
        auto last = std::unique(uniqueLineNumbers.begin(), uniqueLineNumbers.end());
        uniqueLineNumbers.erase(last, uniqueLineNumbers.end());

        // Print the line numbers
        for (size_t i = 0; i < uniqueLineNumbers.size(); i++) {
            std::cout << uniqueLineNumbers[i];
            if (i < uniqueLineNumbers.size() - 1) {
                std::cout << ", ";
            }
        }

        std::cout << std::endl;
    }

    return 0;
}
